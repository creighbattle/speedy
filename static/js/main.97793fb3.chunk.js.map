{"version":3,"sources":["components/Forecast/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","longitude","latitude","speed","pressed","navigator","geolocation","getCurrentPosition","position","setState","coords","this","alert","url","fetch","reponse","json","data","max_speed","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQA2FeA,E,kDAvFX,WAAYC,GAAQ,IAAD,8BAEf,cAAMA,IAEDC,MAAQ,CACTC,UAAW,KACXC,SAAU,KACVC,MAAO,EACPC,SAAS,GARE,E,gbAgCTC,UAAUC,YAAYC,oBACxB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CACtBP,SAAUM,EAASE,OAAOR,SAC1BD,UAAWO,EAASE,OAAOT,e,cAIP,OAAxBU,KAAKX,MAAME,UAA8C,OAAzBS,KAAKX,MAAMC,WAC3CW,MAAM,SAGJC,E,yEAAwEF,KAAKX,MAAMC,U,qBAAsBU,KAAKX,MAAME,U,SACpGY,MAAMD,EAAK,CAC7B,QAAW,CACP,kBAAmB,+BACnB,iBAAkB,wD,cAHpBE,E,gBAMaA,EAAQC,O,OAArBC,E,OAENN,KAAKF,SAAS,CAAEN,MAAOc,EAAKC,Y,sIAqBtB,IAAD,OACL,OACI,6BACI,4BAAQC,QAAS,kBAAM,EAAKX,aAA5B,cACqB,GAApBG,KAAKX,MAAMG,OACR,6BACI,4BAAKQ,KAAKX,MAAMG,a,GAjFrBiB,aCYJC,MAVf,WACE,OACE,6BAEE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB1B,WACrBA,UAAU2B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.97793fb3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Home extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            longitude: null,\n            latitude: null,\n            speed: 0,\n            pressed: false\n        }\n\n    }\n\n    async componentDidMount() {\n\n        // const url = \"https://speedlimit-io.p.rapidapi.com/get_speed_limit?longitude=-75.46798079999999&latitude=39.7279232\";\n        // const reponse = await fetch(url, {\n        //     \"headers\": {\n        //         \"x-rapidapi-host\": \"speedlimit-io.p.rapidapi.com\",\n        //         \"x-rapidapi-key\": \"2496fa6213msh5b286d3f657429cp173040jsn13b456d4488f\"\n        //     }\n        // })\n        // const data = await reponse.json();\n        // console.log(data.max_speed);\n\n        // this.position();\n\n\n    }\n\n\n    async position() {\n        await navigator.geolocation.getCurrentPosition(\n            position => this.setState({\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude\n            })\n        )\n\n        if (this.state.latitude !== null && this.state.longitude !== null) {\n            alert('hello')\n        }\n\n        const url = `https://speedlimit-io.p.rapidapi.com/get_speed_limit?longitude=${this.state.longitude}&latitude=${this.state.latitude}`;\n        const reponse = await fetch(url, {\n            \"headers\": {\n                \"x-rapidapi-host\": \"speedlimit-io.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"2496fa6213msh5b286d3f657429cp173040jsn13b456d4488f\"\n            }\n        })\n        const data = await reponse.json();\n        //console.log(data.max_speed);\n        this.setState({ speed: data.max_speed })\n\n    }\n\n    // showPosition() {\n    //     fetch(\"https://speedlimit-io.p.rapidapi.com/get_speed_limit?longitude=-75.46798079999999&latitude=39.7279232\", {\n    //         \"method\": \"GET\",\n    //         \"headers\": {\n    //             \"x-rapidapi-host\": \"speedlimit-io.p.rapidapi.com\",\n    //             \"x-rapidapi-key\": \"2496fa6213msh5b286d3f657429cp173040jsn13b456d4488f\"\n    //         }\n    //     })\n    //         .then(response => {\n    //             response.json();\n    //         })\n    //         .catch(err => {\n    //             console.log(err);\n    //         });\n    // }\n\n\n    render() {\n        return (\n            <div>\n                <button onClick={() => this.position()}>Show Speed</button>\n                {this.state.speed != 0 &&\n                    <div>\n                        <h1>{this.state.speed}</h1>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from \"./components/Forecast/Home\";\n\nfunction App() {\n  return (\n    <div>\n      \n      <Home/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}