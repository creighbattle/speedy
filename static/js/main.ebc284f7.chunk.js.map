{"version":3,"sources":["components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["latitude","longitude","Home","props","state","speed","pressed","firstTime","navigator","geolocation","watchPosition","this","success","error","timeout","test","setInterval","console","log","setState","pos","coords","e","Button","className","onClick","testerFunction","Container","fluid","Jumbotron","Row","Col","style","color","marginTop","fontSize","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2WAIIA,G,MAAW,GACXC,EAAY,EAiLDC,E,kDA7KX,WAAYC,GAAQ,IAAD,8BAEf,cAAMA,IAEDC,MAAQ,CACTH,UAAW,KACXD,SAAU,KACVK,MAAO,EACPC,SAAS,EACTC,WAAW,GATA,E,2SAyGfC,UAAUC,YAAYC,cAAcC,KAAKC,QAASD,KAAKE,MAAO,CAAEC,QAAS,MACzEH,KAAKI,S,6BAID,IAAD,OACHC,aAAY,WACRC,QAAQC,IAAI,WACZ,EAAKC,SAAS,CACVnB,SAAUA,EACVC,UAAWA,MAEhB,O,8BAKCmB,GAEJpB,EAAWoB,EAAIC,OAAOrB,SACtBC,EAAYmB,EAAIC,OAAOpB,Y,4BAGrBqB,GACFL,QAAQC,IAAII,K,+BAIN,IAAD,OACL,OACI,8BAQ4B,IAAvBX,KAAKP,MAAME,SACR,kBAACiB,EAAA,EAAD,CAAQC,UAAU,UAAUC,QAAS,kBAAM,EAAKC,mBAAhD,oBAKJ,kBAACC,EAAA,EAAD,CAAWC,OAAK,GAEZ,kBAACC,EAAA,EAAD,CAAWL,UAAU,SAEjB,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKP,UAAU,gBAEa,IAAvBb,KAAKP,MAAME,SACR,6BACI,wBAAI0B,MAAO,CAAEC,MAAO,QAASC,UAAW,IAAKC,SAAU,KAAOxB,KAAKP,MAAMJ,oB,GAhK9FoC,aCQJC,MAVf,WACE,OACE,6BAEE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLI,QAAQJ,MAAMA,EAAMyC,c","file":"static/js/main.ebc284f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Jumbotron, Row, Col, Button } from 'react-bootstrap';\nimport './Home.css';\n\nlet latitude = 0;\nlet longitude = 0;\n\nclass Home extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            longitude: null,\n            latitude: null,\n            speed: 0,\n            pressed: false,\n            firstTime: true\n        }\n\n    }\n\n    async componentDidMount() {\n\n        // const url = \"https://speedlimit-io.p.rapidapi.com/get_speed_limit?longitude=-75.46798079999999&latitude=39.7279232\";\n        // const reponse = await fetch(url, {\n        //     \"headers\": {\n        //         \"x-rapidapi-host\": \"speedlimit-io.p.rapidapi.com\",\n        //         \"x-rapidapi-key\": \"2496fa6213msh5b286d3f657429cp173040jsn13b456d4488f\"\n        //     }\n        // })\n        // const data = await reponse.json();\n        // console.log(data.max_speed);\n\n        // this.position();\n\n        // this.initalPosition();\n\n\n    }\n\n    // async initalPosition() {\n    //     await navigator.geolocation.getCurrentPosition(\n    //         position => this.setState({\n    //             latitude: position.coords.latitude,\n    //             longitude: position.coords.longitude\n    //         })\n    //     )\n    // }\n\n\n    // async position() {\n\n    //     if (this.state.firstTime === true) {\n\n    //         this.setState({ firstTime: false })\n\n    //         // await navigator.geolocation.getCurrentPosition(\n    //         //     position => this.setState({\n    //         //         latitude: position.coords.latitude,\n    //         //         longitude: position.coords.longitude\n    //         //     })\n    //         // )\n\n    //         // const url = `https://speedlimit-io.p.rapidapi.com/get_speed_limit?longitude=${this.state.longitude}&latitude=${this.state.latitude}`;\n    //         // const reponse = await fetch(url, {\n    //         //     \"headers\": {\n    //         //         \"x-rapidapi-host\": \"speedlimit-io.p.rapidapi.com\",\n    //         //         \"x-rapidapi-key\": \"2496fa6213msh5b286d3f657429cp173040jsn13b456d4488f\"\n    //         //     }\n    //         // })\n    //         // const data = await reponse.json();\n    //         // //console.log(data.max_speed);\n    //         // this.setState({ speed: data.max_speed })\n    //         // this.setState({ pressed: true })\n\n    //         // this.position()\n\n    //         // let position = navigator.geolocation.watchPosition(this.success, this.error, this.options);\n    //         // console.log(position);\n\n    //     } else {\n\n    //         alert('hi')\n\n    //         // await navigator.geolocation.getCurrentPosition(\n    //         //     position => this.setState({\n    //         //         latitude: position.coords.latitude,\n    //         //         longitude: position.coords.longitude\n    //         //     })\n    //         // )\n\n    //         const url = `https://speedlimit-io.p.rapidapi.com/get_speed_limit?longitude=${this.state.longitude}&latitude=${this.state.latitude}`;\n    //         const reponse = await fetch(url, {\n    //             \"headers\": {\n    //                 \"x-rapidapi-host\": \"speedlimit-io.p.rapidapi.com\",\n    //                 \"x-rapidapi-key\": \"2496fa6213msh5b286d3f657429cp173040jsn13b456d4488f\"\n    //             }\n    //         })\n    //         const data = await reponse.json();\n    //         //console.log(data.max_speed);\n    //         this.setState({ speed: data.max_speed })\n\n    //         this.setState({ pressed: true })\n\n\n    //     }\n\n    // }\n\n\n    testerFunction() {\n\n        navigator.geolocation.watchPosition(this.success, this.error, { timeout: 5000 })\n        this.test()\n\n    }\n\n    test() {\n        setInterval(() => {\n            console.log('working')\n            this.setState({\n                latitude: latitude,\n                longitude: longitude\n            })\n        }, 3000)\n        \n    }\n\n\n    success(pos) {\n        //console.log(pos.coords.latitude)\n        latitude = pos.coords.latitude;\n        longitude = pos.coords.longitude;\n    }\n\n    error(e) {\n        console.log(e)\n    }\n\n\n    render() {\n        return (\n            <div>\n                {/* <button onClick={() => this.position()}>Show Speed</button>\n                {this.state.speed != 0 &&\n                    <div>\n                        <h1>{this.state.speed}</h1>\n                    </div>\n                } */}\n\n                {this.state.pressed === false &&\n                    <Button className=\"content\" onClick={() => this.testerFunction()}>Show Speed Limit</Button>\n                }\n\n\n\n                <Container fluid>\n\n                    <Jumbotron className=\"jumbo\">\n\n                        <Row>\n                            <Col className=\"text-center\">\n\n                                {this.state.pressed === false &&\n                                    <div>\n                                        <h1 style={{ color: 'white', marginTop: 150, fontSize: 50 }}>{this.state.latitude}</h1>\n                                    </div>\n                                }\n                            </Col>\n                        </Row>\n\n                    </Jumbotron>\n\n                </Container>\n\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return (\n    <div>\n      \n      <Home/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}